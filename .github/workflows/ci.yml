name: CI

on:
  push:
    branches:
      - master
      - develop

  pull_request:
    branches:
      - master
      - develop
      - tests
      - feature/*
      - veriblock*

jobs:
  linux-native:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1
        with:
          path: main
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
          echo "::set-output name=commits_ahead::$(git rev-list $(git describe --tags $(git rev-list --tags --max-count=1)).. --count)"
          echo "::set-output name=last_tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-
      - name: get version for veriblock-pop-cpp
        run: echo "VERIBLOCK_POP_CPP_VERSION=$(awk -F '=' '/\$\(package\)_version/{print $NF}' $PWD/depends/packages/veriblock-pop-cpp.mk | head -n1)" >> $GITHUB_ENV
      - name: veriblock-pop-cpp release version
        run: echo Using veriblock-pop-cpp version $VERIBLOCK_POP_CPP_VERSION
      - name: add bitcoin ppa
        run: sudo add-apt-repository ppa:bitcoin/bitcoin
      - name: install build requirements
        run: sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 ccache
      - name: install dependencies
        run: sudo apt-get install libevent-dev python3-zmq python3-dev libboost-python-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev libdb4.8-dev libdb4.8++-dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libqrencode-dev libarchive-dev
      - name: install veriblock-pop-cpp
        env:
          BUILD_TYPE: Release
        run: |
          (
          cd /opt;
          wget https://github.com/VeriBlock/alt-integration-cpp/archive/${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          tar -xf ${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          cd alt-integration-cpp-${VERIBLOCK_POP_CPP_VERSION};
          mkdir build;
          cd build;
          cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTESTING=OFF -DWITH_PYPOPMINER=ON;
          make -j2;
          sudo make install
          )
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: ./configure
          --disable-bench
      - name: make
        run: make -j2
      - name: make check
        timeout-minutes: 60
        run: make check
      - name: make deploy
        if: success()
        run: make deploy
      - name: create artifacts
        if: success()
        run: |
          chmod +x ./release/pexa*
          mv ./release Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}
          tar czvf Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-linux-x64.tar.gz Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}/
      - name: upload artifacts
        if: success()
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ARTIFACT_HOST }}
          username: ${{ secrets.ARTIFACT_USER }}
          key: ${{ secrets.ARTIFACT_KEY }}
          passphrase: ${{ secrets.ARTIFACT_KEY_PASSPHRASE }}
          source: Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-linux-x64.tar.gz
          target: ${{ secrets.ARTIFACT_PATH }}
      - name: upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-x86_64-linux-gnu
          path: Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: run functional tests
        if: always()
        timeout-minutes: 60
        run: python3 test/functional/test_runner.py

  x86_64-w64-mingw32:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1
        with:
          path: main
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
          echo "::set-output name=commits_ahead::$(git rev-list $(git describe --tags $(git rev-list --tags --max-count=1)).. --count)"
          echo "::set-output name=last_tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
          echo "::set-output name=version::$(cat configure.ac | head -n4 | tail -n3 | sed 's/[^[:digit:]]//g;' | sed ':a;N;$!ba;s/\n/./g')"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: depends cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.depends_cache
          key: mingw32-depends-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-depends-
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: mingw32-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-ccache-
      - name: install build requirements
        run: sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git g++-mingw-w64-x86-64 ccache nsis
      - name: set the default mingw32 g++ compiler option to posix
        run: sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: strip out problematic Windows %PATH% imported var
        run: PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g')
      - name: set variables and build dependencies for x86_64-w64
        env:
          BUILD_TYPE: Release
          HOST: x86_64-w64-mingw32
          BASE_CACHE: ~/.depends_cache
        run: cd depends && make -j2
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/
          --disable-bench
      - name: make
        run: make -j2 deploy
      - name: create artifacts
        if: success()
        run: |
          mv ./release Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}
          zip -r9 Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-win64-qt.zip Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: upload artifacts
        if: success()
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ARTIFACT_HOST }}
          username: ${{ secrets.ARTIFACT_USER }}
          key: ${{ secrets.ARTIFACT_KEY }}
          passphrase: ${{ secrets.ARTIFACT_KEY_PASSPHRASE }}
          source: Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-win64-qt.zip
          target: ${{ secrets.ARTIFACT_PATH }}
      - name: upload artifacts
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-win64
          path: Pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: upload pexa-${{ steps.extract_branch.outputs.version }}-win64-setup.exe
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: pexa-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-win64-setup
          path: pexa-${{ steps.extract_branch.outputs.version }}-win64-setup.exe